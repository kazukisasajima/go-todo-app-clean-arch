openapi: 3.0.3
info:
  title: Task Management API
  version: 1.0.0
servers:
  - url: http://0.0.0.0:8080/api/v1
  - url: http://localhost:8080/api/v1
  - url: http://127.0.0.1:8080/api/v1
paths:
  /tasks:
    post:
      summary: Create a new task
      operationId: createTask
      requestBody:
        $ref: "#/components/requestBodies/TaskCreateRequest"
        required: true
      responses:
        "201":
          $ref: "#/components/responses/TaskResponse"
        "400":
          $ref: "#/components/responses/ErrorResponse"
      security:
        - CsrfAuth: []  # X-CSRF-TOKEN を要求            
    get:
      summary: Get all tasks
      operationId: getAllTasks
      responses:
        "200":
          $ref: "#/components/responses/TaskListResponse"
        "400":
          $ref: "#/components/responses/ErrorResponse"
      security:
        - CsrfAuth: []  # X-CSRF-TOKEN を要求          
  /tasks/{id}:
    get:
      tags:
        - tasks
      summary: Get a task by ID
      operationId: getTaskById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/TaskResponse"
        "400":
          $ref: "#/components/responses/ErrorResponse"
        "404":
          $ref: "#/components/responses/ErrorResponse"
      security:
        - CsrfAuth: []  # X-CSRF-TOKEN を要求            
    put:
      tags:
        - tasks
      summary: Update a task by ID
      operationId: updateTaskById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        $ref: "#/components/requestBodies/TaskUpdateRequest"
        required: true
      responses:
        "200":
          $ref: "#/components/responses/TaskResponse"
        "400":
          $ref: "#/components/responses/ErrorResponse"
        "404":
          $ref: "#/components/responses/ErrorResponse"
      security:
        - CsrfAuth: []  # X-CSRF-TOKEN を要求             
    delete:
      tags:
        - tasks
      summary: Delete a task by ID
      operationId: deleteTaskById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Task deleted
        "400":
          $ref: "#/components/responses/ErrorResponse"
        "404":
          $ref: "#/components/responses/ErrorResponse"
      security:
        - CsrfAuth: []  # X-CSRF-TOKEN を要求             
  /users:
    get:
      tags:
        - users
      summary: Get the current user's information
      operationId: getCurrentUser
      responses:
        "200":
          $ref: "#/components/responses/UserResponse"
        "400":
          $ref: "#/components/responses/ErrorResponse"
        "404":
          $ref: "#/components/responses/ErrorResponse"
      security:
        - CsrfAuth: []  # 認証が必須
    delete:
      tags:
        - users
      summary: Delete the current user
      operationId: deleteCurrentUser
      responses:
        "204":
          description: User deleted
        "400":
          $ref: "#/components/responses/ErrorResponse"
        "404":
          $ref: "#/components/responses/ErrorResponse"
      security:
        - CsrfAuth: []  # 認証が必須

  /auth/signup:
    post:
      summary: Create a new user
      operationId: createUser
      requestBody:
        $ref: "#/components/requestBodies/UserCreateRequest"
        required: true
      responses:
        "201":
          $ref: "#/components/responses/UserResponse"
        "400":
          $ref: "#/components/responses/ErrorResponse"
      security:
        - CsrfAuth: []  # X-CSRF-TOKEN を要求             
  /auth/login:
    post:
      summary: Log in a user
      operationId: loginUser
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
              required:
                - email
                - password
        required: true
      responses:
        "200":
          description: Login successful
          headers:
            Set-Cookie:
              description: Session or JWT Cookie
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  csrf_token:
                    type: string
                required:
                  - message
                  - auth_token
        "401":
          $ref: "#/components/responses/ErrorResponse"
  /auth/logout:
    post:
      summary: Log out a user
      operationId: logoutUser
      responses:
        "200":
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                required:
                  - message
      security:
        - CsrfAuth: []  # X-CSRF-TOKEN を要求                     
  /auth/csrf:
    get:
      summary: Get a CSRF token
      operationId: getCsrfToken
      responses:
        "200":
          description: CSRF token retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  csrf_token:
                    type: string
                required:
                  - auth_token
components:
  securitySchemes:
    CsrfAuth:
      type: apiKey
      in: header
      name: X-CSRF-TOKEN  # カスタムヘッダー名を指定
  schemas:
    Task:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        user_id:
          type: integer
      required:
        - id
        - title
        - user_id
    TaskList:
      type: array
      items:
        $ref: "#/components/schemas/Task"
    TaskCreateRequest:
      type: object
      properties:
        title:
          type: string
        user_id:
          type: integer
      required:
        - title
        - user_id
    TaskUpdateRequest:
      type: object
      properties:
        title:
          type: string       
    UserCreateRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
      required:
        - email
        - password
  requestBodies:
    TaskCreateRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/TaskCreateRequest"
    TaskUpdateRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/TaskUpdateRequest"
    UserCreateRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UserCreateRequest"
  responses:
    TaskResponse:
      description: Task response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Task"
    TaskListResponse:
      description: List of tasks response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/TaskList"              
    UserResponse:
      description: User response
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: integer
              email:
                type: string
            required:
              - id
              - email
    ErrorResponse:
      description: Error response
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
            required:
              - message
